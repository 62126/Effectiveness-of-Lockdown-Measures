# -*- coding: utf-8 -*-
"""Effectiveness of Lockdown Measures.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u_ntyUmXwremwPWY_mBj6TuUV6nqjmct
"""

import numpy as np
import pandas as pd
from google.colab import files
uploaded = files.upload()

from scipy.integrate import odeint
import matplotlib.pyplot as plt

#The dictionaries europeSocialContact{} and asiaSocialContact{} are used to call the social age contact matrices from the excel file. 
#The keys in the dictionary correspond to the sheet number with respect to the excel file.
#For example for europeSocialContact{} excel sheet number 9 represents the social age contact matrix for the country Albania
#The countryPopulation{} dictionary contains the population for all countries used in this study. Data courtesy of worldometer.com 

europeSocialContact = {
    9:"Albania",
    10:"Austria",
    11:"Belarus",
    12:"Belgium",
    13:"Bosnia and Herzegovina",
    14:"Bulgaria",
    15:"Croatia",
    16:"Czechia",
    17:"Denmark",
    18:"Estonia",
    19:"Finland",
    20:"France",
    21:"Germany",
    22:"Greece",
    23:"Hungry",
    24:"Iceland",
    25:"Ireland",
    26:"Italy",
    27:"Latvia",
    28:"Lithuania",
    29:"Luxembourg",
    30:"Malta",
    31:"Moldova",
    32:"Montenegro",
    33:"Netherlands",
    34:"North Macedonia",
    35:"Norway",
    36:"Poland",
    37:"Portugal",
    38:"Romania",
    39:"Russia",
    40:"Serbia",
    41:"Slovakia",
    42:"Slovenia",
    43:"Spain",
    44:"Sweden",
    45:"Switzerland",
    46:"Ukraine",
    47:"United Kingdom",
}

asiaSocialContact = {
    2:"Afghanistan",
    3:"Armenia",
    4:"Azerbaijan",
    5:"Bahrain",
    6:"Bangladesh",
    7:"Bhutan",
    8:"Brunei",
    9:"Cambodia",
    10:"China",
    11:"Cyprus",
    12:"Georgia",
    13:"Hong Kong",
    14:"India",
    15:"Indonesia",
    16:"Iran",
    17:"Iraq",
    18:"Israel",
    19:"Japan",
    20:"Jordan",
    21:"Kazakhstan",
    22:"Kuwait",
    23:"Kyrgyzstan",
    24:"Laos",
    25:"Macao",
    26:"Malaysia",
    27:"Maldives",
    28:"Mongolia",
    29:"Myanmar",
    30:"Nepal",
    31:"Oman",
    32:"Pakistan",
    33:"Palestine",
    34:"Philippines",
    35:"Qatar",
    36:"Saudi Arabia",
    37:"Singapore",
    38:"South Korea",
    39:"Sri Lanka",
    40:"Syria",
    41:"Tajikistan",
    42:"Thailand",
    43:"Timor-Leste",
    44:"Turkey",
    45:"United Arab Emirates",
    46:"Uzbekistan",
    47:"Vietnam",
    48:"Yemen",
}

countryPopulation = {
    "Albania":2871997,
    "Austria":9101265,
    "Belarus":9443585,
    "Belgium":11682736,
    "Bosnia and Herzegovina":3243156,
    "Bulgaria":6851913,
    "Croatia":4058543,
    "Czechia":10745656,
    "Denmark":5829856,
    "Estonia":1328182,
    "Finland":5556609,
    "France":65540141,
    "Germany":84278500,
    "Greece":10329086,
    "Hungry":9615074,
    "Iceland":345331,
    "Ireland":5039605,
    "Italy":60297717,
    "Latvia":1847717,
    "Lithuania":2652206,
    "Luxembourg":644775,
    "Malta":443714,
    "Moldova":4016657,
    "Montenegro":628213,
    "Netherlands":17204861,
    "North Macedonia":2083216,
    "Norway":5499497,
    "Poland":37770097,
    "Portugal":10141831,
    "Romania":19000844,
    "Russia":146049974,
    "Serbia":8672412,
    "Slovakia":5464524,
    "Slovenia":2079465,
    "Spain":46788207,
    "Sweden":10215519,
    "Switzerland":8771464,
    "Ukraine":43248837,
    "United Kingdom":68544332,
    "Afghanistan":40546229,
    "Armenia":2973467,
    "Azerbaijan":10307886,
    "Bahrain":1810684,
    "Bangladesh":167718285,
    "Bhutan":787292,
    "Brunei":445212,
    "Cambodia":17146073,
    "China":1439323776,
    "Cyprus":1223584,
    "Georgia":3975033,
    "Hong Kong":7609264,
    "India":1405050791,
    "Indonesia":278862930,
    "Iran":85977471,
    "Iraq":41888147,
    "Israel":9326000,
    "Japan":125761807,
    "Jordan":10390120,
    "Kazakhstan":19191306,
    "Kuwait":4387151,
    "Kyrgyzstan":6722872,
    "Laos":7470438,
    "Macao":665674,
    "Malaysia":33131486,
    "Maldives":558116,
    "Mongolia":3375735,
    "Myanmar":55083164,
    "Nepal":30104047,
    "Oman":5346274,
    "Pakistan":228808361,
    "Palestine":5320253,
    "Philippines":112273356,
    "Qatar":2807805,
    "Saudi Arabia":35814628,
    "Singapore":5935281,
    "South Korea":51350635,
    "Sri Lanka":21578994,
    "Syria":18285153,
    "Tajikistan":9932973,
    "Thailand":70123303,
    "Timor-Leste":1364791,
    "Turkey":86014381,
    "United Arab Emirates":10110992,
    "Uzbekistan":34364560,
    "Vietnam":98955379,
    "Yemen":31038221,
}

#For loops reading the excel files for the social age contact matrix
for x in range(9,48):
  europeSocialContact[x] = pd.read_excel('EU Contact Matrix MMULT.xlsx', sheet_name = x)

for y in range(2,49):
  asiaSocialContact[y] = pd.read_excel('Asia Contact Matrix - MMULT.xlsx', sheet_name = y)

#To access the population of a country just call the value of the country in the dictionary as shown below
countryPopulation["Albania"]

#To access the social age contact matrix call the sheet number of the country shown in the dictionary above.
#For example asiaSocialContact[10] calls for the social age contact matrix of China as 10 is the sheet number of the excel file corresponding to China
asiaSocialContact[10]

#The function covidSIR represents the system of ODEs used to simulate covid using the SIR model
#The function covidSIRAsiaSimluations() takes 3 parameters: country, countrycode, agegroup
#The function covidSIREuropeSimluations() fullfills the same functionality of covidSIRAsiaSimluations() but for countries in Europe instead
#The parameter country must be a string of the country in question
#The parameter countrycode must be an integer and must be referred to the dictionary above for reference, for example 9 is albania
#The parameter age group must be an integer from 0-15, with 0 representing the age group 0-5, 1 representing 5-10, etc
#beta represents the transmission rate set to an average of 1 
#matrix represents the sum of average contacts the specified age group has reported  
#D represents the removal rate set to 18 as an infected person is infective on average of 18 days
#It is assumed that initially only 1 person is infected hence the initial number of susceptible people is the total population -1, inital number of infected people 1 and initial number of recovered people 0
#Test different values of beta to simulate different scenarios during a pandemic 
#second input in np.linspace also requires some testing to appropriately show the graph in the correct scale
def covidSIR(y, t, N, beta, gamma, matrix):
  S, I, R = y
  dSdt = -beta * S * I * matrix / N
  dIdt = beta * S * I * matrix / N - gamma * I
  dRdt = gamma * I
  return dSdt, dIdt, dRdt

def covidSIRAsiaSimluations(country, countrycode, agegroup):
  N = countryPopulation[country]
  beta = 1
  matrix = asiaSocialContact[countrycode].sum(numeric_only=True).values[agegroup]
  D = 18 
  gamma = 1 / D

  S0, I0, R0 = N-1, 1, 0  

  t = np.linspace(0,3, num=50) 
  y0 = S0, I0, R0 

  simulate = odeint(covidSIR, y0, t, args=(N, beta, gamma, matrix))
  S, I, R = simulate.T

  f, ax = plt.subplots(1,1,figsize=(10,4))
  ax.plot(t, S, 'b', alpha=0.7, linewidth=2, label='Susceptible')
  ax.plot(t, I, 'y', alpha=0.7, linewidth=2, label='Infected')
  ax.plot(t, R, 'g', alpha=0.7, linewidth=2, label='Recovered')

  ax.set_xlabel('Time (Entire duration of pandemic)')
  ax.set_ylabel('Population')

  ax.yaxis.set_tick_params(length=0)
  ax.xaxis.set_tick_params(length=0)
  ax.grid(b=True, which='major', c='w', lw=2, ls='-')
  legend = ax.legend()
  legend.get_frame().set_alpha(0.5)
  for spine in ('top', 'right', 'bottom', 'left'):
      ax.spines[spine].set_visible(False)
  plt.show();

def covidSIREuropeSimluations(country, countrycode, agegroup):
  N = countryPopulation[country]
  beta = 1
  matrix = europeSocialContact[countrycode].sum(numeric_only=True).values[agegroup]
  D = 18 
  gamma = 1 / D

  S0, I0, R0 = N-1, 1, 0  

  t = np.linspace(0,2, num=50) 
  y0 = S0, I0, R0 

  simulate = odeint(covidSIR, y0, t, args=(N, beta, gamma, matrix))
  S, I, R = simulate.T

  f, ax = plt.subplots(1,1,figsize=(10,4))
  ax.plot(t, S, 'b', alpha=0.7, linewidth=2, label='Susceptible')
  ax.plot(t, I, 'y', alpha=0.7, linewidth=2, label='Infected')
  ax.plot(t, R, 'g', alpha=0.7, linewidth=2, label='Recovered')

  ax.set_xlabel('Time (Entire duration of pandemic)')
  ax.set_ylabel('Population')

  ax.yaxis.set_tick_params(length=0)
  ax.xaxis.set_tick_params(length=0)
  ax.grid(b=True, which='major', c='w', lw=2, ls='-')
  legend = ax.legend()
  legend.get_frame().set_alpha(0.5)
  for spine in ('top', 'right', 'bottom', 'left'):
      ax.spines[spine].set_visible(False)
  plt.show();

covidSIREuropeSimluations("Bulgaria", 14, 6)